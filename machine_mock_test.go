// Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//	http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: machine.go

// Package firecracker is a generated GoMock package.
package firecracker

import (
	context "context"
	models "github.com/firecracker-microvm/firecracker-go-sdk/client/models"
	operations "github.com/firecracker-microvm/firecracker-go-sdk/client/operations"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFirecracker is a mock of Firecracker interface
type MockFirecracker struct {
	ctrl     *gomock.Controller
	recorder *MockFirecrackerMockRecorder
}

// MockFirecrackerMockRecorder is the mock recorder for MockFirecracker
type MockFirecrackerMockRecorder struct {
	mock *MockFirecracker
}

// NewMockFirecracker creates a new mock instance
func NewMockFirecracker(ctrl *gomock.Controller) *MockFirecracker {
	mock := &MockFirecracker{ctrl: ctrl}
	mock.recorder = &MockFirecrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFirecracker) EXPECT() *MockFirecrackerMockRecorder {
	return m.recorder
}

// PutLogger mocks base method
func (m *MockFirecracker) PutLogger(ctx context.Context, logger *models.Logger) (*operations.PutLoggerNoContent, error) {
	ret := m.ctrl.Call(m, "PutLogger", ctx, logger)
	ret0, _ := ret[0].(*operations.PutLoggerNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutLogger indicates an expected call of PutLogger
func (mr *MockFirecrackerMockRecorder) PutLogger(ctx, logger interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLogger", reflect.TypeOf((*MockFirecracker)(nil).PutLogger), ctx, logger)
}

// PutMachineConfiguration mocks base method
func (m *MockFirecracker) PutMachineConfiguration(ctx context.Context, cfg *models.MachineConfiguration) (*operations.PutMachineConfigurationNoContent, error) {
	ret := m.ctrl.Call(m, "PutMachineConfiguration", ctx, cfg)
	ret0, _ := ret[0].(*operations.PutMachineConfigurationNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMachineConfiguration indicates an expected call of PutMachineConfiguration
func (mr *MockFirecrackerMockRecorder) PutMachineConfiguration(ctx, cfg interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMachineConfiguration", reflect.TypeOf((*MockFirecracker)(nil).PutMachineConfiguration), ctx, cfg)
}

// PutGuestBootSource mocks base method
func (m *MockFirecracker) PutGuestBootSource(ctx context.Context, source *models.BootSource) (*operations.PutGuestBootSourceNoContent, error) {
	ret := m.ctrl.Call(m, "PutGuestBootSource", ctx, source)
	ret0, _ := ret[0].(*operations.PutGuestBootSourceNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutGuestBootSource indicates an expected call of PutGuestBootSource
func (mr *MockFirecrackerMockRecorder) PutGuestBootSource(ctx, source interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGuestBootSource", reflect.TypeOf((*MockFirecracker)(nil).PutGuestBootSource), ctx, source)
}

// PutGuestNetworkInterfaceByID mocks base method
func (m *MockFirecracker) PutGuestNetworkInterfaceByID(ctx context.Context, ifaceID string, ifaceCfg *models.NetworkInterface) (*operations.PutGuestNetworkInterfaceByIDNoContent, error) {
	ret := m.ctrl.Call(m, "PutGuestNetworkInterfaceByID", ctx, ifaceID, ifaceCfg)
	ret0, _ := ret[0].(*operations.PutGuestNetworkInterfaceByIDNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutGuestNetworkInterfaceByID indicates an expected call of PutGuestNetworkInterfaceByID
func (mr *MockFirecrackerMockRecorder) PutGuestNetworkInterfaceByID(ctx, ifaceID, ifaceCfg interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGuestNetworkInterfaceByID", reflect.TypeOf((*MockFirecracker)(nil).PutGuestNetworkInterfaceByID), ctx, ifaceID, ifaceCfg)
}

// PutGuestDriveByID mocks base method
func (m *MockFirecracker) PutGuestDriveByID(ctx context.Context, driveID string, drive *models.Drive) (*operations.PutGuestDriveByIDNoContent, error) {
	ret := m.ctrl.Call(m, "PutGuestDriveByID", ctx, driveID, drive)
	ret0, _ := ret[0].(*operations.PutGuestDriveByIDNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutGuestDriveByID indicates an expected call of PutGuestDriveByID
func (mr *MockFirecrackerMockRecorder) PutGuestDriveByID(ctx, driveID, drive interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGuestDriveByID", reflect.TypeOf((*MockFirecracker)(nil).PutGuestDriveByID), ctx, driveID, drive)
}

// PutGuestVsockByID mocks base method
func (m *MockFirecracker) PutGuestVsockByID(ctx context.Context, vsockID string, vsock *models.Vsock) (*operations.PutGuestVsockByIDCreated, *operations.PutGuestVsockByIDNoContent, error) {
	ret := m.ctrl.Call(m, "PutGuestVsockByID", ctx, vsockID, vsock)
	ret0, _ := ret[0].(*operations.PutGuestVsockByIDCreated)
	ret1, _ := ret[1].(*operations.PutGuestVsockByIDNoContent)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PutGuestVsockByID indicates an expected call of PutGuestVsockByID
func (mr *MockFirecrackerMockRecorder) PutGuestVsockByID(ctx, vsockID, vsock interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGuestVsockByID", reflect.TypeOf((*MockFirecracker)(nil).PutGuestVsockByID), ctx, vsockID, vsock)
}

// CreateSyncAction mocks base method
func (m *MockFirecracker) CreateSyncAction(ctx context.Context, info *models.InstanceActionInfo) (*operations.CreateSyncActionNoContent, error) {
	ret := m.ctrl.Call(m, "CreateSyncAction", ctx, info)
	ret0, _ := ret[0].(*operations.CreateSyncActionNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSyncAction indicates an expected call of CreateSyncAction
func (mr *MockFirecrackerMockRecorder) CreateSyncAction(ctx, info interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSyncAction", reflect.TypeOf((*MockFirecracker)(nil).CreateSyncAction), ctx, info)
}

// GetMachineConfig mocks base method
func (m *MockFirecracker) GetMachineConfig() (*operations.GetMachineConfigOK, error) {
	ret := m.ctrl.Call(m, "GetMachineConfig")
	ret0, _ := ret[0].(*operations.GetMachineConfigOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineConfig indicates an expected call of GetMachineConfig
func (mr *MockFirecrackerMockRecorder) GetMachineConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineConfig", reflect.TypeOf((*MockFirecracker)(nil).GetMachineConfig))
}
